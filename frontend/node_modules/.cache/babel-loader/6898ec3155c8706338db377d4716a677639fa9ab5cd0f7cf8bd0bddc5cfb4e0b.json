{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Manoli\\\\Desktop\\\\Learn Programming\\\\frontend\\\\src\\\\components\\\\Snake.js\";\nimport React, { Component } from 'react';\nimport '../css/Snake.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HEIGHT = 10;\nconst WIDTH = 12;\nconst emptyRows = () => [...Array(WIDTH)].map(_ => [...Array(HEIGHT)].map(_ => 'grid-item'));\nconst getRandom = () => {\n  return {\n    x: Math.floor(Math.random() * WIDTH),\n    y: Math.floor(Math.random() * HEIGHT)\n  };\n};\nconst LEFT = 37;\nconst UP = 38;\nconst RIGHT = 39;\nconst DOWN = 40;\nconst STOP = 32;\nconst initialState = {\n  rows: emptyRows(),\n  snake: [getRandom()],\n  food: getRandom(),\n  direction: STOP,\n  speed: 100\n};\nclass Snake extends Component {\n  constructor() {\n    super();\n    this.movement = () => {\n      let snakeCopy = [...this.state.snake];\n      let head = {\n        ...snakeCopy[snakeCopy.length - 1]\n      };\n      switch (this.state.direction) {\n        case LEFT:\n          head.y += -1;\n          break;\n        case UP:\n          head.x += -1;\n          break;\n        case RIGHT:\n          head.y += 1;\n          break;\n        case DOWN:\n          head.x += 1;\n          break;\n        default:\n          return;\n      }\n      head.x += HEIGHT * ((head.x < 0) - (head.x >= HEIGHT));\n      head.y += WIDTH * ((head.y < 0) - (head.y >= WIDTH));\n      snakeCopy.push(head);\n      snakeCopy.shift();\n      this.setState({\n        snake: snakeCopy,\n        head: head\n      });\n      this.update();\n    };\n    this.changeDirection = _ref => {\n      let {\n        keycode\n      } = _ref;\n      let direction = this.state.direction;\n      switch (keycode) {\n        case LEFT:\n          direction = direction === RIGHT ? RIGHT : LEFT;\n          break;\n        case RIGHT:\n          direction = direction === LEFT ? LEFT : RIGHT;\n          break;\n        case UP:\n          direction = direction === DOWN ? DOWN : UP;\n          break;\n        case DOWN:\n          direction = direction === UP ? UP : DOWN;\n          break;\n        case STOP:\n          direction = STOP;\n          break;\n        default:\n          break;\n      }\n      this.setState({\n        direction: direction\n      });\n    };\n    this.state = initialState;\n  }\n  correctAnswer() {}\n  characterDeath() {\n    let snake = this.state.snake;\n    let head = {\n      ...snake[snake.length - 1]\n    };\n    for (let i = 0; i < snake.length - 3; i++) {\n      if (head.x === snake[i].x && head.y === snake[i].y) {\n        this.setState(initialState);\n        alert('game over: ${snake.length + 10}');\n      }\n    }\n  }\n\n  /* Changes the direction the snake is moving based on the keyboard input.\r\n     Can't go back the direction you are coming from. ex. Checks if already going RIGHT before changing direction to LEFT. */\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.changeDirection;\n  }\n  update() {\n    let newRows = emptyRows();\n    this.state.snake.forEach(element => newRows[element.x][element.y] = 'snake');\n    newRows[this.state.food.x][this.state.food.y] = 'food';\n    this.setState({\n      rows: newRows\n    });\n  }\n  render() {\n    const displayRows = this.state.rows.map((row, i) => row.map((value, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n      name: `${i}=${j}`,\n      className: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"questions\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This is where the questions will go.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"And the options somewhere here.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"gameBoard\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"snake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"book\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"score\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Score: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Snake;","map":{"version":3,"names":["React","Component","HEIGHT","WIDTH","emptyRows","Array","map","_","getRandom","x","Math","floor","random","y","LEFT","UP","RIGHT","DOWN","STOP","initialState","rows","snake","food","direction","speed","Snake","constructor","movement","snakeCopy","state","head","length","push","shift","setState","update","changeDirection","keycode","correctAnswer","characterDeath","i","alert","componentDidMount","setInterval","moveSnake","document","onkeydown","newRows","forEach","element","render","displayRows","row","value","j"],"sources":["C:/Users/Manoli/Desktop/Learn Programming/frontend/src/components/Snake.js"],"sourcesContent":["import React, {Component} from 'react';\r\nimport '../css/Snake.css';\r\n\r\nconst HEIGHT = 10;\r\nconst WIDTH = 12;\r\n\r\nconst emptyRows = () => [...Array(WIDTH)].map((_)=>\r\n                        [...Array(HEIGHT)].map((_)=> 'grid-item'));\r\n\r\nconst getRandom = () => {\r\n    return {\r\n        x: Math.floor(Math.random() * WIDTH),\r\n        y: Math.floor(Math.random() * HEIGHT)\r\n    }\r\n}\r\n\r\nconst LEFT  = 37; \r\nconst UP    = 38;\r\nconst RIGHT = 39; \r\nconst DOWN  = 40;\r\nconst STOP  = 32;\r\n\r\nconst initialState = {\r\n    rows: emptyRows(),\r\n    snake: [getRandom()],\r\n    food: getRandom(),\r\n    direction: STOP,\r\n    speed: 100,\r\n}\r\n\r\n\r\nclass Snake extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = initialState;\r\n    }\r\n\r\n\r\n    movement = () => {\r\n        let snakeCopy = [...this.state.snake];\r\n        let head = {...snakeCopy[snakeCopy.length - 1]};\r\n\r\n        switch(this.state.direction) {\r\n            case LEFT:\r\n                head.y += -1;\r\n                break;\r\n            case UP:\r\n                head.x += -1;\r\n                break;\r\n            case RIGHT:\r\n                head.y += 1;\r\n                break;\r\n            case DOWN:\r\n                head.x += 1;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        head.x += HEIGHT * ((head.x < 0) - (head.x >= HEIGHT));\r\n        head.y += WIDTH * ((head.y < 0) - (head.y >= WIDTH));\r\n\r\n        snakeCopy.push(head);\r\n        snakeCopy.shift()\r\n        this.setState({\r\n            snake: snakeCopy,\r\n            head: head\r\n        });\r\n\r\n        this.update();\r\n    }\r\n\r\n\r\n    correctAnswer() {\r\n\r\n    }\r\n\r\n\r\n    characterDeath() {\r\n        let snake = this.state.snake;\r\n        let head = {...snake[snake.length - 1]}\r\n        for(let i = 0; i < snake.length - 3; i++) {\r\n            if((head.x === snake[i].x) && (head.y === snake[i].y)) {\r\n                this.setState(initialState);\r\n                alert('game over: ${snake.length + 10}')\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /* Changes the direction the snake is moving based on the keyboard input.\r\n       Can't go back the direction you are coming from. ex. Checks if already going RIGHT before changing direction to LEFT. */\r\n    changeDirection = ({keycode}) => {\r\n        let direction = this.state.direction;\r\n        switch (keycode) {\r\n            case LEFT:\r\n                direction = (direction === RIGHT)? RIGHT : LEFT;\r\n                break;\r\n            case RIGHT:\r\n                direction = (direction === LEFT)? LEFT: RIGHT;\r\n                break;\r\n            case UP:\r\n                direction = (direction === DOWN)? DOWN: UP;\r\n                break;\r\n            case DOWN:\r\n                direction = (direction === UP)? UP: DOWN;\r\n                break;\r\n            case STOP:\r\n                direction = STOP;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            direction: direction\r\n        });\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        setInterval(this.moveSnake, this.state.speed);\r\n        document.onkeydown = this.changeDirection;\r\n    }\r\n\r\n\r\n    update() {\r\n        let newRows = emptyRows();\r\n        this.state.snake.forEach(element => newRows[element.x][element.y] = 'snake')\r\n        newRows[this.state.food.x][this.state.food.y] = 'food';\r\n        this.setState({\r\n            rows: newRows\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const displayRows = this.state.rows.map((row, i) => \r\n            row.map((value, j) => \r\n                <div name={`${i}=${j}`} className={value} />))\r\n\r\n        return (\r\n            <div>\r\n                <div id=\"questions\">\r\n                    <p>This is where the questions will go.</p>\r\n                    <p>And the options somewhere here.</p>\r\n                </div>\r\n                \r\n                <div id=\"gameBoard\">\r\n                    <div id=\"snake\"></div>\r\n                    <div id=\"book\"></div>\r\n                </div>\r\n                \r\n                <div id=\"score\">\r\n                    <p>Score: </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Snake;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}