{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Manoli\\\\Desktop\\\\Learn Programming\\\\frontend\\\\src\\\\components\\\\Snake.js\";\nimport React, { Component } from 'react';\nimport '../css/Snake.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HEIGHT = 10;\nconst WIDTH = 10;\nconst LEFT = 37;\nconst UP = 38;\nconst RIGHT = 39;\nconst DOWN = 40;\nconst STOP = 32;\nconst getRandom = () => {\n  return {\n    x: Math.floor(Math.random() * WIDTH),\n    y: Math.floor(Math.random() * HEIGHT)\n  };\n};\nconst emptyRows = () => [...Array(WIDTH)].map(_ => [...Array(HEIGHT)].map(_ => 'grid-item'));\nconst increaseSpeed = speed => speed - 10 * (speed > 10);\nconst initialState = {\n  rows: emptyRows(),\n  snake: [getRandom()],\n  food: getRandom(),\n  direction: STOP,\n  speed: 100\n};\nclass Snake extends Component {\n  constructor() {\n    super();\n    this.movement = () => {\n      let snakeCopy = [...this.state.snake];\n      let head = {\n        ...snakeCopy[snakeCopy.length - 1]\n      };\n      switch (this.state.direction) {\n        case LEFT:\n          head.y += -1;\n          break;\n        case UP:\n          head.x += -1;\n          break;\n        case RIGHT:\n          head.y += 1;\n          break;\n        case DOWN:\n          head.x += 1;\n          break;\n        default:\n          return;\n      }\n      head.x += HEIGHT * ((head.x < 0) - (head.x >= HEIGHT));\n      head.y += WIDTH * ((head.y < 0) - (head.y >= WIDTH));\n      snakeCopy.push(head);\n      snakeCopy.shift();\n      this.setState({\n        snake: snakeCopy,\n        head: head\n      });\n      this.update();\n    };\n    this.changeDirection = _ref => {\n      let {\n        keycode\n      } = _ref;\n      let direction = this.state.direction;\n      switch (keycode) {\n        case LEFT:\n          direction = direction === RIGHT ? RIGHT : LEFT;\n          break;\n        case RIGHT:\n          direction = direction === LEFT ? LEFT : RIGHT;\n          break;\n        case UP:\n          direction = direction === DOWN ? DOWN : UP;\n          break;\n        case DOWN:\n          direction = direction === UP ? UP : DOWN;\n          break;\n        case STOP:\n          direction = STOP;\n          break;\n        default:\n          break;\n      }\n      this.setState({\n        direction: direction\n      });\n    };\n    this.state = initialState;\n  }\n  componentDidMount() {\n    setInterval(this.movement, this.state.speed);\n    document.onkeydown = this.changeDirection;\n    document.title = \"Snake Game\";\n  }\n  componentDidUpdate() {\n    this.characterDeath();\n    this.correctAnswer();\n  }\n  correctAnswer() {\n    let snakeCopy = {\n      ...this.state.snake\n    };\n    let head = {\n      ...snakeCopy[snakeCopy.length - 1]\n    };\n    let food = this.state.food;\n    if (head.x === food.x && head.y === food.y) {\n      snakeCopy.push(head);\n      this.setState({\n        snake: snakeCopy,\n        food: getRandom(),\n        speed: increaseSpeed(this.state.speed)\n      });\n    }\n  }\n  update() {\n    let newRows = emptyRows();\n    this.state.snake.forEach(element => newRows[element.x][element.y] = 'snake');\n    newRows[this.state.food.x][this.state.food.y] = 'food';\n    this.setState({\n      rows: newRows\n    });\n  }\n  characterDeath() {\n    let snake = this.state.snake;\n    let head = {\n      ...snake[snake.length - 1]\n    };\n    for (let i = 0; i < snake.length - 3; i++) {\n      if (head.x === snake[i].x && head.y === snake[i].y) {\n        this.setState(initialState);\n        alert(`game over: ${snake.length}`);\n      }\n    }\n  }\n\n  /* Changes the direction the snake is moving based on the keyboard input.\r\n     Can't go back the direction you are coming from. ex. Checks if already going RIGHT before changing direction to LEFT. */\n\n  render() {\n    const displayRows = this.state.rows.map((row, i) => row.map((value, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n      name: `${i}=${j}`,\n      className: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"a\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"snake-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid\",\n          children: displayRows\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Snake;","map":{"version":3,"names":["React","Component","HEIGHT","WIDTH","LEFT","UP","RIGHT","DOWN","STOP","getRandom","x","Math","floor","random","y","emptyRows","Array","map","_","increaseSpeed","speed","initialState","rows","snake","food","direction","Snake","constructor","movement","snakeCopy","state","head","length","push","shift","setState","update","changeDirection","keycode","componentDidMount","setInterval","document","onkeydown","title","componentDidUpdate","characterDeath","correctAnswer","newRows","forEach","element","i","alert","render","displayRows","row","value","j"],"sources":["C:/Users/Manoli/Desktop/Learn Programming/frontend/src/components/Snake.js"],"sourcesContent":["import React, {Component} from 'react';\r\nimport '../css/Snake.css';\r\n\r\nconst HEIGHT = 10;\r\nconst WIDTH = 10;\r\n\r\nconst LEFT  = 37; \r\nconst UP    = 38;\r\nconst RIGHT = 39; \r\nconst DOWN  = 40;\r\nconst STOP  = 32;\r\n\r\nconst getRandom = () => {\r\n    return {\r\n        x: Math.floor(Math.random() * WIDTH),\r\n        y: Math.floor(Math.random() * HEIGHT)\r\n    }\r\n}\r\n\r\nconst emptyRows = () => [...Array(WIDTH)].map((_)=>\r\n                        [...Array(HEIGHT)].map((_)=> 'grid-item'));\r\n\r\n\r\nconst increaseSpeed = (speed) => speed - 10 * (speed > 10);\r\n\r\nconst initialState = {\r\n    rows: emptyRows(),\r\n    snake: [getRandom()],\r\n    food: getRandom(),\r\n    direction: STOP,\r\n    speed: 100,\r\n}\r\n\r\n\r\nclass Snake extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = initialState;\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        setInterval(this.movement, this.state.speed);\r\n        document.onkeydown = this.changeDirection;\r\n        document.title = \"Snake Game\";\r\n    }\r\n\r\n\r\n    componentDidUpdate() {\r\n        this.characterDeath();\r\n        this.correctAnswer();\r\n    }\r\n\r\n\r\n    movement = () => {\r\n        let snakeCopy = [...this.state.snake];\r\n        let head = {...snakeCopy[snakeCopy.length - 1]};\r\n\r\n        switch(this.state.direction) {\r\n            case LEFT:\r\n                head.y += -1;\r\n                break;\r\n            case UP:\r\n                head.x += -1;\r\n                break;\r\n            case RIGHT:\r\n                head.y += 1;\r\n                break;\r\n            case DOWN:\r\n                head.x += 1;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        head.x += HEIGHT * ((head.x < 0) - (head.x >= HEIGHT));\r\n        head.y += WIDTH * ((head.y < 0) - (head.y >= WIDTH));\r\n\r\n        snakeCopy.push(head);\r\n        snakeCopy.shift();\r\n        this.setState({\r\n            snake: snakeCopy,\r\n            head: head\r\n        });\r\n\r\n        this.update();\r\n    }\r\n\r\n\r\n    correctAnswer() {\r\n        let snakeCopy = {...this.state.snake};\r\n        let head = {...snakeCopy[snakeCopy.length - 1]};\r\n        let food = this.state.food;\r\n\r\n        if((head.x === food.x) && (head.y === food.y)) {\r\n            snakeCopy.push(head);\r\n            this.setState({\r\n                snake: snakeCopy,\r\n                food: getRandom(),\r\n                speed: increaseSpeed(this.state.speed)\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    update() {\r\n        let newRows = emptyRows();\r\n        this.state.snake.forEach(element => newRows[element.x][element.y] = 'snake')\r\n        newRows[this.state.food.x][this.state.food.y] = 'food';\r\n        this.setState({\r\n            rows: newRows\r\n        });\r\n    }\r\n\r\n\r\n    characterDeath() {\r\n        let snake = this.state.snake;\r\n        let head = {...snake[snake.length - 1]};\r\n        for(let i = 0; i < snake.length - 3; i++) {\r\n            if((head.x === snake[i].x) && (head.y === snake[i].y)) {\r\n                this.setState(initialState);\r\n                alert(`game over: ${snake.length}`)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /* Changes the direction the snake is moving based on the keyboard input.\r\n       Can't go back the direction you are coming from. ex. Checks if already going RIGHT before changing direction to LEFT. */\r\n    changeDirection = ({keycode}) => {\r\n        let direction = this.state.direction;\r\n        switch (keycode) {\r\n            case LEFT:\r\n                direction = (direction === RIGHT)? RIGHT : LEFT;\r\n                break;\r\n            case RIGHT:\r\n                direction = (direction === LEFT)? LEFT: RIGHT;\r\n                break;\r\n            case UP:\r\n                direction = (direction === DOWN)? DOWN: UP;\r\n                break;\r\n            case DOWN:\r\n                direction = (direction === UP)? UP: DOWN;\r\n                break;\r\n            case STOP:\r\n                direction = STOP;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            direction: direction\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const displayRows = this.state.rows.map((row, i) => \r\n            row.map((value, j) => \r\n                <div name={`${i}=${j}`} className={value} />))\r\n\r\n        return (\r\n            <div className=\"a\">\r\n                {/** \r\n                <div id=\"questions\">\r\n                    <p>This is where the questions will go.</p>\r\n                    <p>And the options somewhere here.</p>\r\n                </div>\r\n                */}\r\n                <div className=\"snake-container\">\r\n                    <div className=\"grid\">\r\n                        {displayRows}\r\n                    </div>\r\n                </div>\r\n                {/** \r\n                <div id=\"score\">\r\n                    <p>Score: </p>\r\n                </div>\r\n                */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Snake;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}